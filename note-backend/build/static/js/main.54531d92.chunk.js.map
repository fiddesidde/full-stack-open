{"version":3,"sources":["components/Note.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","baseUrl","axios","get","then","res","data","newObject","post","id","put","Notification","message","Footer","style","color","fontStyle","fontSize","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","notesToShow","filter","map","find","n","changedNote","returnedNote","catch","err","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","length","date","Date","toISOString","Math","random","concat","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"kLAaeA,EAXF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACZC,EAAQF,EAAKG,UAAY,qBAAuB,iBAEtD,OACI,qBAAIC,UAAU,OAAd,UACKJ,EAAKK,QACN,wBAAQC,QAASL,EAAjB,SAAoCC,Q,gBCP1CK,EAAU,aAkBD,EAhBA,WAEX,OADgBC,IAAMC,IAAIF,GACXG,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SAcpB,EAXA,SAAAC,GAEX,OADgBL,IAAMM,KAAKP,EAASM,GACrBH,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SASpB,EANA,SAACG,EAAIF,GAEhB,OADgBL,IAAMQ,IAAN,UAAaT,EAAb,YAAwBQ,GAAMF,GAC/BH,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SCX7BK,EAAe,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACpB,OAAgB,OAAZA,EAAyB,KAEtB,qBAAKd,UAAU,QAAf,SAAwBc,KAG7BC,EAAS,WAMX,OACI,sBAAKC,MANW,CAChBC,MAAO,QACPC,UAAW,SACXC,SAAU,IAGV,UACI,uBACA,qEAqFGC,EAhFH,WAAO,IAAD,EACYC,mBAAS,IADrB,mBACPC,EADO,KACAC,EADA,OAEgBF,mBAAS,iBAFzB,mBAEPG,EAFO,KAEEC,EAFF,OAGgBJ,oBAAS,GAHzB,mBAGPK,EAHO,KAGEC,EAHF,OAI0BN,mBAAS,MAJnC,mBAIPO,EAJO,KAIOC,EAJP,KAMdC,qBAAU,WACNC,IAAqBzB,MAAK,SAAA0B,GACtBT,EAASS,QAEd,IAEH,IAuCMC,EAAcP,EAAUJ,EAAQA,EAAMY,QAAO,SAAAtC,GAAI,OAAIA,EAAKG,aAEhE,OACI,gCACI,uCACA,cAAC,EAAD,CAAce,QAASc,IACvB,8BACI,yBAAQ1B,QAAS,kBAAMyB,GAAYD,IAAnC,kBACUA,EAAU,iBAAmB,WAG3C,6BACKO,EAAYE,KAAI,SAAAvC,GAAI,OACjB,cAAC,EAAD,CAEIA,KAAMA,EACNC,iBAAkB,kBAxCX,SAAAc,GACvB,IAAMf,EAAO0B,EAAMc,MAAK,SAAAC,GAAC,OAAIA,EAAE1B,KAAOA,KAChC2B,EAAW,2BAAQ1C,GAAR,IAAcG,WAAYH,EAAKG,YAEhDgC,EACYpB,EAAI2B,GACXhC,MAAK,SAAAiC,GACFhB,EACID,EAAMa,KAAI,SAAAvC,GAAI,OAAKA,EAAKe,KAAOA,EAAKf,EAAO2C,SAGlDC,OAAM,SAAAC,GACHZ,EAAgB,SAAD,OACFjC,EAAKK,QADH,yCAGfyC,YAAW,kBAAMb,EAAgB,QAAO,KACxCN,EAASD,EAAMY,QAAO,SAAAG,GAAC,OAAIA,EAAE1B,KAAOA,SAwBJgC,CAAmB/C,EAAKe,MAF3Cf,EAAKe,SAMtB,uBAAMiC,SA3DE,SAAAC,GACZA,EAAMC,iBACN,IAAMC,EAAa,CACfpC,GAAIW,EAAM0B,OAAS,EACnB/C,QAASuB,EACTyB,MAAM,IAAIC,MAAOC,cACjBpD,UAAWqD,KAAKC,SAAW,IAG/BtB,EAAmBgB,GAAYzC,MAAK,SAAAiC,GAChChB,EAASD,EAAMgC,OAAOf,IACtBd,EAAW,QAgDX,UACI,uBAAO8B,MAAO/B,EAASgC,SAzBV,SAAAX,GACrBpB,EAAWoB,EAAMY,OAAOF,UAyBhB,wBAAQG,KAAK,SAAb,qBAEJ,cAAC,EAAD,Q,MC9FZC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.54531d92.chunk.js","sourcesContent":["import React from 'react';\n\nconst Note = ({ note, toggleImportance }) => {\n    const label = note.important ? 'make not important' : 'make important';\n\n    return (\n        <li className=\"note\">\n            {note.content}\n            <button onClick={toggleImportance}>{label}</button>\n        </li>\n    );\n};\n\nexport default Note;\n","import axios from 'axios';\nconst baseUrl = '/api/notes';\n\nconst getAll = () => {\n    const request = axios.get(baseUrl);\n    return request.then(res => res.data);\n};\n\nconst create = newObject => {\n    const request = axios.post(baseUrl, newObject);\n    return request.then(res => res.data);\n};\n\nconst update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject);\n    return request.then(res => res.data);\n};\n\n// Shorthand for getAll: getAll, ...\nexport default { getAll, create, update };\n","import React, { useState, useEffect } from 'react';\nimport Note from './components/Note';\nimport noteService from './services/notes';\n\nconst Notification = ({ message }) => {\n    if (message === null) return null;\n\n    return <div className=\"error\">{message}</div>;\n};\n\nconst Footer = () => {\n    const footerStyle = {\n        color: 'green',\n        fontStyle: 'italic',\n        fontSize: 16,\n    };\n    return (\n        <div style={footerStyle}>\n            <br />\n            <em>Note app, Fredrik Mellberg 2020</em>\n        </div>\n    );\n};\n\nconst App = () => {\n    const [notes, setNotes] = useState([]);\n    const [newNote, setNewNote] = useState('a new note...');\n    const [showAll, setShowAll] = useState(true);\n    const [errorMessage, setErrorMessage] = useState(null);\n\n    useEffect(() => {\n        noteService.getAll().then(initialNotes => {\n            setNotes(initialNotes);\n        });\n    }, []);\n\n    const addNote = event => {\n        event.preventDefault();\n        const noteObject = {\n            id: notes.length + 1,\n            content: newNote,\n            date: new Date().toISOString(),\n            important: Math.random() < 0.5,\n        };\n\n        noteService.create(noteObject).then(returnedNote => {\n            setNotes(notes.concat(returnedNote));\n            setNewNote('');\n        });\n    };\n\n    const toggleImportanceOf = id => {\n        const note = notes.find(n => n.id === id);\n        const changedNote = { ...note, important: !note.important };\n\n        noteService\n            .update(id, changedNote)\n            .then(returnedNote => {\n                setNotes(\n                    notes.map(note => (note.id !== id ? note : returnedNote))\n                );\n            })\n            .catch(err => {\n                setErrorMessage(\n                    `Note '${note.content} was already removed from the server`\n                );\n                setTimeout(() => setErrorMessage(null), 5000);\n                setNotes(notes.filter(n => n.id !== id));\n            });\n    };\n\n    const handleNoteChange = event => {\n        setNewNote(event.target.value);\n    };\n\n    const notesToShow = showAll ? notes : notes.filter(note => note.important);\n\n    return (\n        <div>\n            <h1>Notes</h1>\n            <Notification message={errorMessage} />\n            <div>\n                <button onClick={() => setShowAll(!showAll)}>\n                    show {showAll ? 'important only' : 'all'}\n                </button>\n            </div>\n            <ul>\n                {notesToShow.map(note => (\n                    <Note\n                        key={note.id}\n                        note={note}\n                        toggleImportance={() => toggleImportanceOf(note.id)}\n                    />\n                ))}\n            </ul>\n            <form onSubmit={addNote}>\n                <input value={newNote} onChange={handleNoteChange} />\n                <button type=\"submit\">save</button>\n            </form>\n            <Footer />\n        </div>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// const promise2 = axios.get('http://localhost:3001/foobar');\n// console.log(promise2);\n\n// const notes = [\n//     {\n//         id: 1,\n//         content: 'HTML is easy',\n//         date: '2019-05-30T17:30:31.098Z',\n//         important: true,\n//     },\n//     {\n//         id: 2,\n//         content: 'Browser can execute only JavaScript',\n//         date: '2019-05-30T18:39:34.091Z',\n//         important: false,\n//     },\n//     {\n//         id: 3,\n//         content: 'GET and POST are the most important methods of HTTP protocol',\n//         date: '2019-05-30T19:20:14.298Z',\n//         important: true,\n//     },\n// ];\n"],"sourceRoot":""}